# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    environment:
      # DATABASE_URL doesn't appear to override actually? :(
      #DATABASE_URL: postgres://circle:circle@localhost:5432/universal_catalog_test
      ELASTICSEARCH_HOST: localhost
      DATABASE_HOST: localhost
      DATABASE_USER: circle
      DATABASE_PASSWORD: circle
      SECRET_TOKEN: 12345
      RAILS_ENV: test
      REDIS_HOST: redis_host_not_a_real_param
      REDIS_PORT: 1234
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.5.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
       - image: circleci/postgres:latest
         environment:
         - POSTGRES_USER=circle
         - POSTGRES_PASSWORD=circle

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v3-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v3-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run:
          name: rails db:create and db:migrate
          command: |
            bundle exec rails db:create
            bundle exec rails db:migrate
      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      - run:
          name: run rubocop
          command: |
            test_reports_dir=/tmp/test-results/rubocop
            mkdir -p $test_reports_dir
            bundle config error_on_stderr true
            junit_formatter_ruby=$(bundle show rubocop-junit-formatter 2>/dev/null)/lib/rubocop/formatter/junit_formatter.rb
            bundle exec rubocop -L | \
            circleci tests split --split-by=timings --timings-type=filename | \
            xargs bundle exec rubocop -P -D -R -r $junit_formatter_ruby -c .rubocop.yml --format RuboCop::Formatter::JUnitFormatter --out $test_reports_dir/rubocop.xml

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  build_image:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/repo
    steps:
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Init Gcloud
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud auth configure-docker
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
#           gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
#           gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - checkout
      - run:
          name: Add version and commit sha to build
          # Note the first command uses a single > to overwrite version.rb completely. Important.
          command: |
            echo "ENV['BBB_CI_VERSION'] = '$CIRCLE_BRANCH:$CIRCLE_BUILD_NUM'" > config/initializers/ci_version.rb
            echo "ENV['BBB_COMMIT_SHA'] = '$CIRCLE_SHA1'" >> config/initializers/ci_version.rb
            echo "ENV['CIRCLE_COMPARE_URL'] = '$CIRCLE_COMPARE_URL'" >> config/initializers/ci_version.rb
      - run:
          name: Push container to GCR
          command: |
            if [[ "master" = "$CIRCLE_BRANCH" ]] ; then
              SHOULD_DEPLOY="true"
            else
              SHOULD_DEPLOY="false"
            fi
            NUMERIC_TAG="build-${CIRCLE_BUILD_NUM}"
            GCR_HOST=us.gcr.io
            DOCKER_IMAGE_NAME=$(echo -n ${CIRCLE_PROJECT_REPONAME} | tr '[:upper:]' '[:lower:]'| sed -e 's/_/-/g' -e 's/[^a-z0-9\-]//g')
            SAFEBRANCH=$(echo -n ${CIRCLE_BRANCH} | sed -E -e 's/_/-/g' -e 's/([a-z0-9])([A-Z])/\1-\2/g' -e 's/[^A-Za-z0-9\-]//g' | tr '[:upper:]' '[:lower:]' )
            DOCKERURL="${GCR_HOST}/${GOOGLE_PROJECT_ID}/appengine/${DOCKER_IMAGE_NAME}"
            docker build -t ${DOCKERURL}.${SAFEBRANCH} -t ${DOCKERURL}:${NUMERIC_TAG} .
            docker push ${DOCKERURL}.${SAFEBRANCH}:latest && echo "Pushed successfully 1/2" || echo "Failed to push ${TAG}"
            docker push ${DOCKERURL}:${NUMERIC_TAG} && echo "Pushed successfully 2/2" || echo "Failed to push ${NUMERIC_TAG}"
#            if [[ "true" = "$SHOULD_DEPLOY" ]] ; then
#              echo "Should-deploy was set to true - @TODO to deploy CI/CD env..."
#            fi
  build_oracle:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/repo
    steps:
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Init Gcloud
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud auth configure-docker
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
#           gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
#           gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - checkout
      - run:
          name: Add version and commit sha to build
          # Note the first command uses a single > to overwrite version.rb completely. Important.
          command: |
            echo "ENV['BBB_CI_VERSION'] = '$CIRCLE_BRANCH:$CIRCLE_BUILD_NUM'" > config/initializers/ci_version.rb
            echo "ENV['BBB_COMMIT_SHA'] = '$CIRCLE_SHA1'" >> config/initializers/ci_version.rb
            echo "ENV['CIRCLE_COMPARE_URL'] = '$CIRCLE_COMPARE_URL'" >> config/initializers/ci_version.rb
      - run:
          name: Push container to GCR
          command: |
            if [[ "master" = "$CIRCLE_BRANCH" ]] ; then
              SHOULD_DEPLOY="true"
            else
              SHOULD_DEPLOY="false"
            fi
            NUMERIC_TAG="build-${CIRCLE_BUILD_NUM}"
            GCR_HOST=us.gcr.io
            DOCKER_IMAGE_NAME=$(echo -n ${CIRCLE_PROJECT_REPONAME} | tr '[:upper:]' '[:lower:]'| sed -e 's/_/-/g' -e 's/[^a-z0-9\-]//g')
            SAFEBRANCH=$(echo -n ${CIRCLE_BRANCH} | sed -E -e 's/_/-/g' -e 's/([a-z0-9])([A-Z])/\1-\2/g' -e 's/[^A-Za-z0-9\-]//g' | tr '[:upper:]' '[:lower:]' )
            DOCKERURL="${GCR_HOST}/${GOOGLE_PROJECT_ID}/appengine/${DOCKER_IMAGE_NAME}"

            if [[ "${CIRCLE_BRANCH}" = "master" ]] || [[ "${CIRCLE_BRANCH}" = "oracle-dgp-circle" ]] ; then
              FULL_IMAGE_NAME="${GCR_HOST}/${GOOGLE_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}_oracle"
            else
              FULL_IMAGE_NAME="${DOCKERURL}.${SAFEBRANCH}-oracle"
            fi

            docker build -f Dockerfile.oracle -t "${FULL_IMAGE_NAME}" .
            docker push "${FULL_IMAGE_NAME} && echo "Pushed successfully" || echo "Failed to push ${FULL_IMAGE_NAME}"



workflows:
  version: 2
  ci_workflow:
    jobs:
      - build
      - build_image:
          requires:
            - build
      - build_oracle:
          requires:
            - build
          branches:
            only:
              - master
              - /oracle-.*/


#
#==============
# If you're dev'ing on this config file locally and want to avoid having to push a million revisions to GitHub try this! Just change the file locally and save, then:
# 1. export CIRCLE_TOKEN=xxxxxxx (get your token here -> https://circleci.com/account/api ) - I added this to my .bash_profile
# 2. Run this command in the ROOT of the repository:
# curl --user ${CIRCLE_TOKEN}: --request POST --form revision=$(git rev-parse --verify HEAD) --form config=@.circleci/config.yml --form notify=false  https://circleci.com/api/v1.1/project/github/okl/$(basename $(pwd))/tree/$(git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n')
#
